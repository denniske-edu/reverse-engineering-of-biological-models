/*
 * Simple Arithmetics Grammar
 * ==========================
 *
 * Accepts expressions like "2 * (3 + 4)" and computes their value.
 */

{

var Add = (function () {
  function Add(l, r) { this._ = "Add"; this.l = l; this.r = r; }
  return Add;
})();

var Sub = (function () {
  function Sub(l, r) { this._ = "Subtract"; this.l = l; this.r = r; }
  return Sub;
})();

var Mult = (function () {
  function Mult(l, r) { this._ = "Mult"; this.l = l; this.r = r; }
  return Mult;
})();

var Div = (function () {
  function Div(l, r) { this._ = "Div"; this.l = l; this.r = r; }
  return Div;
})();

}


Expression
  = head:Term tail:(_ ("+" / "~") _ Term)* {
      var result = head;

      var i;
      for (i = 0; i < tail.length; i++) {
        if (tail[i][1] === "+") { result = new Add(result, tail[i][3]); }
        if (tail[i][1] === "~") { result = new Sub(result, tail[i][3]); }
      }

      return result;
    }

Term
  = head:Factor tail:(_ ("*" / "/") _ Factor)* {
      var result = head;

      var i;
      for (i = 0; i < tail.length; i++) {
        if (tail[i][1] === "*") { result = new Mult(result, tail[i][3]); }
        if (tail[i][1] === "/") { result = new Div(result, tail[i][3]); }
      }

      return result;
    }

Factor
  = "(" _ expr:Expression _ ")" { return expr; }
  / Integer

Integer "integer"
  = sign:"-"? [0-9]+ { return parseInt(text(), 10); }
  / sign:"-"? letters:[a-zA-Z_0-9]+ { return sign == null ? letters.join('') : new Mult(-1, letters.join('')); }

_ "whitespace"
  = [ \t\n\r]*